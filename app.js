// Generated by CoffeeScript 1.6.2
(function() {
  var app, calendar, client, consumer, express, helpers, oauth, port, rkOptions, runkeeper;

  express = require('express');

  oauth = require('oauth');

  helpers = require('./helpers').helpers;

  app = express();

  rkOptions = exports.options = {
    client_id: process.env.CLIENT_ID,
    client_secret: process.env.CLIENT_SECRET,
    auth_url: 'https://runkeeper.com/apps/authorize',
    access_token_url: 'https://runkeeper.com/apps/token',
    redirect_uri: 'http://uva.herokuapp.com/runkeeper_callback'
  };

  app.configure('development', function() {
    return rkOptions.redirect_uri = 'http://localhost:3000/runkeeper_callback';
  });

  runkeeper = require(__dirname + '/runkeeper.js');

  client = new runkeeper.HealthGraph(rkOptions);

  calendar = require(__dirname + '/calendar_display.js');

  consumer = function() {
    return new oauth.OAuth2(rkOptions.client_id, rkOptions.client_secret, 'http://runkeeper.com', '/apps/authorize', '/apps/token');
  };

  app.configure(function() {
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.logger());
    app.use(express.bodyParser());
    app.use(express.cookieParser());
    return app.use(express["static"](__dirname + '/public'));
  });

  app.engine('jade', require('jade').__express);

  app.configure('development', function() {
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
    return app.use(express.session({
      secret: 'sdofyi234oglkc@oydf'
    }));
  });

  app.configure('production', function() {
    app.use(express.errorHandler());
    return app.use(express.session({
      secret: 'sdofyi234oglkc@oydf'
    }));
  });

  app.get('/', function(req, res) {
    return res.render('index');
  });

  app.get('/runkeeper_login', function(req, res) {
    var oa;

    oa = consumer();
    return res.redirect(oa.getAuthorizeUrl({
      response_type: 'code',
      redirect_uri: rkOptions.redirect_uri
    }));
  });

  app.get('/runkeeper_callback', function(req, res) {
    return client.getNewToken(req.param('code'), function(access_token) {
      req.session.access_token = access_token;
      client.access_token = access_token;
      return res.redirect('/calendar');
    });
  });

  app.get('/calendar', function(req, res) {
    var errors;

    if (!req.session.access_token) {
      res.redirect('/');
      return;
    }
    errors = [];
    return client.profile(function(profile) {
      var error, fitnessActivities, profileInfo;

      fitnessActivities = [];
      profileInfo = {};
      try {
        profileInfo = JSON.parse(profile);
      } catch (_error) {
        error = _error;
        errors.push(error);
      }
      return client.fitnessActivityFeed(function(activities) {
        var calDisplay;

        try {
          fitnessActivities = JSON.parse(activities)['items'];
          calDisplay = new calendar.CalendarDisplay(fitnessActivities);
        } catch (_error) {
          error = _error;
          console.log(error);
          errors.push(error);
        }
        return res.render('calendar', {
          title: 'calendar data!',
          user: profileInfo,
          activities: calDisplay.activitiesByMonth(),
          calData: calDisplay.getElts(),
          errors: errors,
          h: helpers
        });
      });
    });
  });

  port = process.env.PORT || 3000;

  app.listen(port, function() {
    return console.log("Express server listening on port %d in %s mode", port, app.settings.env);
  });

}).call(this);
